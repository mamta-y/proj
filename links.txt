https://www.dotnettricks.com/learn/angularmaterial/datatable-crud-operations-mean-stack
class="p-0 m-0 b-0

pramod.yadav@agiliztech.com
Pramod@123
mongorestore -d <database name> --dir <backup-folder>
8105876276
Mamtay@9
https://www.concretepage.com/angular-material/angular-material-slide-toggle
https://stackblitz.com/edit/mat-slide-toggle-example?file=app%2Fslide-toggle-overview-example.ts
<div class="form-group">
                        <label for="status">Status</label>
                        <select name="status" id="status" class="form-control" ngModel #status="ngModel" required >
                            <option value="">select------</option>
                         <option value="approved">Approved</option>
                        <option value="cancelled">Cancelled</option>
                        <option value="pending">Pending</option>
                        </select>
                        <div id="smallField" *ngIf="status.touched && !status.valid">Status is required</div>
                        </div>




<div class="alert alert-danger" *ngIf="error">
    {{ error }}
  </div>
  <div class="alert alert-success" *ngIf="message">
    {{ message }}
  </div>

<div class="col-md-4 offset-md-4 mt-4">
    <form
      action=""
      #addForm="ngForm"
      (ngSubmit)="onFormSubmit(addForm)">
      <div class="card">
        <div class="card-header text-success text-center fw-bolder">
          Add Employee
        </div>
        <div class="card-body">
          <div class="form-group">
            <label for="firstname">Firstname</label>
            <input
              type="text"
              name="firstname"
              id="firstname"
              class="form-control"
              #firstname required  maxlength="10" minlength="3" 
              ngModel />
            <div id="smallField" *ngIf="firstname.touched && !firstname.valid">Firstname is required</div>
           
            
          </div>
          <div class="form-group">
            <label for="lastname">Lastname</label>
            <input
              type="text"
              name="lastname"
              id="lastname"
              class="form-control"
              #lastname
              ngModel required maxlength="10" minlength="3"
            />
            <div id="smallField" *ngIf="lastname.touched && !lastname.valid">Lastname is required</div>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input
              type="email"
              name="email"
              id="email"
              class="form-control"
              #email
              ngModel required
            />
            <div id="smallField" *ngIf="email.touched && !email.valid">Email is required</div>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input
              type="password"
              name="password"
              id="password"
              class="form-control"
              #password
              ngModel required minlength="6" maxlength="255"
            />
            <div id="smallField" *ngIf="password.touched && !password.valid">password is required</div>
          </div>
          <div class="form-group">
            <label for="departmentname">Department</label>
            <input
              type="text"
              name="departmentname"
              id="departmentname"
              class="form-control"
              #departmentname required maxlength="15" minlength="6"
              ngModel
            />
            <div id="smallField" *ngIf="departmentname.touched && !departmentname.valid">Department name is required</div>
          </div>
          <div class="form-group">
            <label for="joiningdate">Date of Joining</label>
            <input
              type="date"
              name="joiningdate"
              id="joiningdate"
              class="form-control"
              #joiningdate
              ngModel required
            />
            <div id="smallField" *ngIf="joiningdate.touched && !joiningdate.valid">Joining date is required</div>
          </div>
          <div class="form-group">
            <label for="date_of_birth">Date of Birth</label>
            <input
              type="number"
              name="date_of_birth"
              id="date_of_birth"
              class="form-control"
              #date_of_birth 
              minlength="18" maxlength="58"
              ngModel required
            />
            <div id="smallField" *ngIf="date_of_birth.touched && !date_of_birth.valid">Date of birth is required</div>
          </div>
        </div>
        <div class="card-footer">
          <div class="button-group float-right">
            <div class="d-grid gap-2 col-4 mx-auto">
            <button type="submit" class="btn btn-secondary">Submit</button>
           
                 <button type="reset" class="btn btn-primary">Reset</button>
            
          </div>
          </div>
        </div>
      </div>
    </form>
  </div>
















import { Component, OnInit } from '@angular/core';
import { AuthService } from '../auth.service';
import { LeaveService } from '../leave.service';


@Component({
  selector: 'app-leave',
  templateUrl: './leave.component.html',
  styleUrls: ['./leave.component.css']
})
export class LeaveComponent implements OnInit {
  error:any;
  message:any;
  res:any;
  err:any;
  ValidationErrors:any;
  form: any;
  constructor(private la:LeaveService ,public auth:AuthService) { }

  ngOnInit(): void {
  
  }
leave(leaveform:any){
this.la.addleave(leaveform.value).subscribe((res: { error: any; })=>{
  if(!res.error){
    leaveform.reset();
    this.message="Leave  Added Successfully!!!"
  }else{
    this.error="Leave Not  Added "
  }
},(err: any) =>{
  this.error="Server Error"
})
}

}



<button mat-stroked-button (click)="toggleAdmin()">Toggle Admin</button>
<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">
  <!--- Note that these columns can be defined in any order.
        The actual rendered columns are set as a property on the row definition" -->

  <!-- Position Column -->
  <ng-container matColumnDef="position">
    <th mat-header-cell *matHeaderCellDef>No.</th>
    <td mat-cell *matCellDef="let element">{{element.position}}</td>
  </ng-container>

  <!-- Name Column -->
  <ng-container matColumnDef="name">
    <th mat-header-cell *matHeaderCellDef>Name</th>
    <td mat-cell *matCellDef="let element">{{element.name}}</td>
  </ng-container>

  <!-- Weight Column -->
  <ng-container matColumnDef="weight">
    <th mat-header-cell *matHeaderCellDef>Weight</th>
    <td mat-cell *matCellDef="let element">{{element.weight}}</td>
  </ng-container>

  <!-- Symbol Column -->
  <ng-container matColumnDef="symbol">
    <th mat-header-cell *matHeaderCellDef>Symbol</th>
    <td mat-cell *matCellDef="let element">{{element.symbol}}</td>
  </ng-container>

  <!-- activate Column -->
  <ng-container matColumnDef="activate">
    <th mat-header-cell *matHeaderCellDef>active</th>
    <td mat-cell *matCellDef="let element">{{element.activate}}</td>
  </ng-container>

  <!-- toggle olumn -->
  <ng-container matColumnDef="toggle">
    <th mat-header-cell *matHeaderCellDef>toggle</th>
    <td mat-cell *matCellDef="let element; let i=index">
      <mat-slide-toggle
        [checked]="element.activate"
        (change)="updateActiveStatus(element,$event,i)"
        >{{element.activate ? 'Regular' : 'Normal'}}</mat-slide-toggle
      >
    </td>
  </ng-container>

  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
</table>

<!-- Copyright 2019 Google Inc. All Rights Reserved.
    Use of this source code is governed by an 







import { Component } from '@angular/core';

export interface PeriodicElement {
  name: string;
  position: number;
  weight: number;
  symbol: string;
  activate: boolean;
  role: string;
}

const ELEMENT_DATA: PeriodicElement[] = [
  {
    position: 1,
    name: 'Hydrogen',
    weight: 1.0079,
    symbol: 'H',
    activate: true,
    role: '1',
  },
  {
    position: 2,
    name: 'Helium',
    weight: 4.0026,
    symbol: 'He',
    activate: false,
    role: '1',
  },
  {
    position: 3,
    name: 'Lithium',
    weight: 6.941,
    symbol: 'Li',
    activate: true,
    role: '1',
  },
  // { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be', activate: false, role: '1' },
  // { position: 5, name: 'Boron', weight: 10.811, symbol: 'B', activate: true, role: '1' },
  // { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C', activate: true, role: '1' },
  // { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N', activate: true, role: '1' },
  // { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O', activate: true, role: '1' },
  // { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F', activate: true, role: '1' },
  // { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne', activate: true, role: '1' },
];

/**
 * @title Basic use of `<table mat-table>`
 */
@Component({
  selector: 'table-basic-example',
  styleUrls: ['table-basic-example.css'],
  templateUrl: 'table-basic-example.html',
})
export class TableBasicExample {
  allColumns: string[] = [
    'position',
    'name',
    'weight',
    'symbol',
    'activate',
    'toggle',
  ];
  displayedColumns: string[];
  dataSource = ELEMENT_DATA;
  isAdmin: string = 'fresher';
  message: any;
  ngOnInit() {
    this.checkIfAdmin();
  }

  checkIfAdmin() {
    this.displayedColumns = this.isAdmin
      ? this.allColumns
      : this.allColumns.filter((column) => column !== 'toggle');
  }

  // toggleAdmin() {
  //   this.isAdmin = !this.isAdmin;
  //   this.checkIfAdmin();
  // }

  updateActiveStatus(element, e, index) {
    //element.activate = !element.activate;
    if (e.checked) this.dataSource[index].activate = true;
    else this.dataSource[index].activate = false;
  }
}

